// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    
    apply from: rootProject.file('versions.gradle')
    ext {
        kotlin_version = '1.4-M1'
    }
    
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
    }
    
    dependencies {
        
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.Kotlin}"
        // @todo classpath "org.jetbrains.kotlin:kotlin-android-extensions:${Versions.Kotlin}"
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        //classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
        //classpath 'com.google.gms:google-services:4.2.0'
        //classpath 'io.fabric.tools:gradle:1.26.1'
        //classpath "com.github.ben-manes:gradle-versions-plugin:${versions.gradleVersions}"
        
    }
    
}

allprojects {
    
    repositories {
        google()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
    }
    
    apply from: rootProject.file('ext.gradle')
    apply from: rootProject.file('versions.gradle')
    apply from: rootProject.file('libraries.gradle')
    
    gradle.projectsEvaluated {
        
        // Allow Kotlin to output more errors, so the root cause is not obscured
        tasks.withType(JavaCompile.class) {
            options.compilerArgs << "-Xmaxerrs" << "10000"
        }
        
        // Ensure Kotlin is targeting the correct JVM version
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
        
        // Add some options for JUnit5
        tasks.withType(Test) {
            //jacoco.includeNoLocationClasses = true
            //useJUnitPlatform()
            /*useJUnitPlatform {
                //includeTags 'fast', 'smoke & feature-a'
                //excludeTags 'slow', 'ci'
                includeEngines 'junit-jupiter'
                //excludeEngines 'junit-vintage'
            }*/
        }
        
    }
    
    afterEvaluate {
    
        try {
            // Allow Kotlin's APT compiler to output more errors, so the root cause is not obscured
            if (project.plugins.hasPlugin("kotlin-kapt")) {
                kapt {
                    javacOptions {
                        option("-Xmaxerrs", 10000)
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}
