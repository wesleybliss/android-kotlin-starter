apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
//apply plugin: "com.github.ben-manes.versions"

apply plugin: "de.mannodermaus.android-junit5"

android {

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    
    defaultConfig {
        
        applicationId "com.kotlinandroidstarter.app"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        dataBinding {
            enabled = true
        }
        
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        
    }
    
    signingConfigs {

        debug {
            storeFile project.rootProject.file('debug.jks').getCanonicalFile()
            storePassword "android"
            keyAlias "debug"
            keyPassword "android"
        }
        
        release {
            storeFile project.rootProject.file('Todo.jks').getCanonicalFile()
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
        
    }
    
    buildTypes {
        
        all {
            minifyEnabled false
        }
        
        debug {
            debuggable true
            versionNameSuffix "-DEBUG"
            applicationIdSuffix '.dev'
            signingConfig signingConfigs.debug
            buildConfigField "String", "API_BASE_URL", "\"https://jsonplaceholder.typicode.com\""
        }
        
        release {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://jsonplaceholder.typicode.com\""

        }
        
    }
    
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    
    compileOptions {
        sourceCompatibility versions.java
        targetCompatibility versions.java
    }
    
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries true
    }
    
    packagingOptions {
        exclude 'META-INF/core.kotlin_module'
        exclude 'META-INF/main.kotlin_module'
    }
    
    // Gradle automatically adds 'android.test.runner' as a dependency.
    useLibrary 'android.test.runner'
    
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
    
    testOptions {
        unitTests.includeAndroidResources = true
    }

}

configurations.all {
    //resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-reflect:1.0.6'
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    resolutionStrategy.force "com.google.android.gms:play-services-gcm:${versions.playServices}"
}

/*android.buildTypes.each { type ->
    type.buildConfigField 'String', 'FOO_KEY', FOO_KEY
}*/

androidExtensions {
    experimental = true
}

dependencies {
    
    // Testing
    /*androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'org.jetbrains.spek:spek-apiService:1.1.2'
    implementation 'org.jetbrains.spek:spek-junit-platform-engine:1.1.2'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation 'org.amshove.kluent:kluent:1.25'
    testImplementation 'org.mockito:mockito-core:2.10.0'
    testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0'
    testImplementation 'io.kotlintest:kotlintest:2.0.4'
    androidTestImplementation "com.android.support:support-annotations:$AndroidSupportLibVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'*/

    testRuntimeOnly libs.kotlinReflect
    
    // Required for local unit tests (JUnit 4 framework)
    //testImplementation libs.junit

    testImplementation libs.junit
    testImplementation libs.supportTestArchCore
    testImplementation libs.supportAnnotations
    testImplementation libs.supportTestRules
    testImplementation libs.truth
    testImplementation libs.koinTest
    testImplementation libs.mockitoKotlin2
    
    // Required for instrumented tests
    androidTestImplementation libs.supportAnnotations
    androidTestImplementation libs.supportTestRunner

    androidTestImplementation libs.espressoCore
    androidTestImplementation libs.espressoIntents
    androidTestImplementation libs.mockitoKotlin2
    androidTestImplementation libs.mockitoAndroid
    
    //
    
    implementation libs.kotlin
    implementation libs.coroutines
    implementation libs.coroutinesAndroid

    debugImplementation libs.leakCanary
    debugImplementation libs.leakCanaryDebug
    releaseImplementation libs.leakCanaryRelease
    implementation libs.stetho
    implementation libs.stethoOkHttp
    implementation libs.stethoJsRhino
    implementation libs.stethoRealm
    implementation(libs.crashlytics) {
        transitive = true
    }

    implementation libs.appCompat
    implementation libs.recyclerview
    implementation libs.constraintlayout
    implementation libs.cardview
//    implementation libs.browser
    
    implementation libs.androidKtx
    implementation libs.fragmentsKtx
    
//    implementation libs.flexbox
    implementation libs.material
    
//    implementation libs.room
//    kapt libs.roomProcessor
    implementation libs.lifecycleExtensions
    kapt libs.lifecycleCompiler
    implementation libs.viewmodelKtx
    implementation libs.livedataKtx
    implementation libs.workmanager
//    implementation libs.paging
    
    implementation libs.legacy
    implementation libs.legacyUtils
    implementation libs.legacyUI
    
    implementation libs.koin
    implementation libs.koinViewModel
    
    implementation libs.timber
    implementation libs.hawk
    
    //VAR:RX implementation libs.rxKotlin
    //VAR:RX implementation libs.rxAndroid
    
    implementation libs.moshi
    implementation libs.okhttp
    implementation libs.okhttpLogger
    
    implementation libs.retrofit
    implementation libs.retrofitMoshi
    implementation libs.retrofitCoroutines
    implementation libs.retrofitLogging

    implementation libs.realmExtensions
    
    implementation libs.threeTenABP
    
    implementation libs.fresco
    //apiService libs.frescoOkHttp
    implementation libs.frescoAnimatedGif
    implementation libs.frescoWebP
    implementation libs.frescoAnimatedWebP
    
    implementation libs.glide
    kapt libs.glideProcessor

    kapt libs.kotshiCompiler
    implementation libs.kotshiApi

    implementation libs.frescoImageViewer
    
    // Proprietary libraries
    //implementation libs.fcm
    //implementation libs.firebaseAnalytics
    //implementation libs.playServicesAuth
    //implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') { transitive = true }
    //implementation('com.crashlytics.sdk.android:answers:1.4.3@aar') { transitive = true }
    
}
