apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.diffplug.gradle.spotless'

apply from: rootProject.file('versions.gradle')
apply from: rootProject.file(GradleIncludes.BuildTypes)

android {
    
    compileSdkVersion Meta.CompileSdkVersion
    
    defaultConfig {
        
        minSdkVersion Meta.MinSdkVersion
        targetSdkVersion Meta.TargetSdkVersion
        versionCode Meta.VersionCode
        versionName Meta.VersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        
    }
    
    buildTypes {
        all {}
        debug {}
        release {}
    }
    
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.java.srcDirs += 'src/main/sqldelight'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    
    compileOptions {
        sourceCompatibility Versions.Java
        targetCompatibility Versions.Java
    }
    
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries true
    }
    
    packagingOptions {
        exclude 'META-INF/core.kotlin_module'
        exclude 'META-INF/main.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }
    
}

/*configurations.all {
    //resolutionStrategy.force 'org.jetbrains.kotlin:kotlin-reflect:1.0.6'
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    resolutionStrategy.force "com.google.android.gms:play-services-gcm:${Versions.PlayServices}"
}*/

/*android.buildTypes.each { type ->
    type.buildConfigField 'String', 'FOO_KEY', FOO_KEY
}*/

androidExtensions {
    experimental = true
}

dependencies {
    
    if (name != "logging")
        api project(Modules.Logging)
    
    if (name != "domain")
        api project(Modules.Domain)
    
    api Libraries.Kotlin
    
    api Libraries.Koin
    api Libraries.KoinViewModel
    
    api Libraries.JavaXAnnotations
    
    testImplementation Libraries.JUnit
    /*testImplementation Libraries.KoinTest
    androidTestImplementation Libraries.TestRunner
    androidTestImplementation Libraries.TestEspresso*/
    
}

ktlint {
    version = "${Versions.KtLint}"
    debug = false
    verbose = false
    android = true
    outputToConsole = true
    //reporters = [ReporterType.JSON]
    ignoreFailures = false
    enableExperimentalRules = true
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}


spotless {
    kotlin {
        ktlint("${Versions.KtLint}").userData([
            'indent_size': '4',
            'continuation_indent_size' : '4'
        ])
    }
}
